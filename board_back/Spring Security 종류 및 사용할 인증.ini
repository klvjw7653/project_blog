Basic Authentication
    -사용자 이름 / 비밀번호를 Base64로 인코딩하여 Authentication 헤더에 포함하여 전송됨
    -매우 안전하지 않음, SSL/TLS 와 함께 사용됨

    Authentication: Basic~~

Bearer Token Authentication
    -헤더에 토큰을 포함하여 전송 Authentication 헤더에 포함하여 전송
    -JWT을 사용하여 인증처리를 함
    -간단한 방식, 상태를 유지하지 않음, 확장성이 높다.

    단점: 토큰 노출 위험, 토큰 관리가 힘듬

    Authentication: Bearer~~

OAuth
    -토큰기반 인증 방식, 사용자가 직접 자격을 증명이 아닌 미리 인증 받아서 토큰을 발급 받고
    -이 토큰을 이용하여 API를 요청하는 방식 OAuth 2.0

    kakao/ naver/git/facebook 사용한다.

API key/ Session based Authentication


사용할 것은 Bearer Token Authentication

JWT(JSON Web Token)란?
클레임이라고 불리는 정보를 JSON 형태로 안전하게 전송하기 위한 토큰 기반의 표준이다.

    -인증과 정보 교환에 사용, 서명이 되어 있어서 신뢰성 확보가 가능

세가지가 분류될 수 있다.
1. Header: 토큰의 타입과 사용된 알고리즘 정보를 담고 있음, Base64URL로 incoding
2. Payload: 클레임 정보, 대상, 발행자, 만료 시간 등 다양한 정보가 포함됨, Base64URL로 incoding
3. Signature: Header와 Payload, Secret Key를 사용하여 생성된 서명

인증, 정보교환 주로 사용됨 JWT.io사이트에서 볼 수 있음

[장점]
1. 상태를 유지하지 않음
2. 간단하고 자기 포함적: 정보에 대해서 자체적으로 암호화함
3.확장성이 높다

[단점]
1.크기: 클레임이 많을 수록 토큰의 크기가 커짐
2.보안: 서명은 되어있지만 암호화는 되어있지 않음 중요한 정보를 JWT에 포함하면 안됨
3.토큰 관리: 만료시간, 갱신 